/// CharInfo for CFL/FFL, representing fields of Ver3StoreData.
public class Ver3CharInfo
{
    public int MiiVersion;

    public int FaceType;
    public int FaceColor;
    public int FaceTex;
    public int FaceMake;

    public int HairType;
    public int HairColor;
    public int HairFlip;

    public int EyeType;
    public int EyeColor;
    public int EyeScale;
    public int EyeAspect;
    public int EyeRotate;
    public int EyeX;
    public int EyeY;

    public int EyebrowType;
    public int EyebrowColor;
    public int EyebrowScale;
    public int EyebrowAspect;
    public int EyebrowRotate;
    public int EyebrowX;
    public int EyebrowY;

    public int NoseType;
    public int NoseScale;
    public int NoseY;

    public int MouthType;
    public int MouthColor;
    public int MouthScale;
    public int MouthAspect;
    public int MouthY;

    public int MustacheType;
    public int BeardType;
    public int BeardColor;
    public int BeardScale;
    public int BeardY;

    public int GlassType;
    public int GlassColor;
    public int GlassScale;
    public int GlassY;

    public int MoleType;
    public int MoleScale;
    public int MoleX;
    public int MoleY;

    public int Height;
    public int Build;

    public ushort[11] Name;
    public ushort[11] CreatorName;

    public int Gender;
    public int BirthMonth;
    public int BirthDay;
    public int FavoriteColor;
    public bool Favorite;
    public bool Copyable;
    public bool NgWord;
    public bool Localonly;
    public int RegionMove;
    public int FontRegion;
    public int RoomIndex;
    public int PositionInRoom;
    public int BirthPlatform;

    public byte[10] CreateId;
    public int AuthorType;
    // ushort Padding0;
    public byte[8] AuthorId;

    public void SetAuthorId!(byte[] value, int offset = 0)
    {
        value.CopyTo(offset, AuthorId, 0, AuthorId.Length);
    }

    public void SetName!(ushort[] value, int offset = 0)
    {
        for (int i = 0; i < 10; i++)
            Name[i] = value[offset + i];
        // Always null-terminate the string.
        Name[10] = 0;
    }

    public void SetCreateId!(byte[] value, int offset = 0)
    {
        value.CopyTo(offset, CreateId, 0, CreateId.Length);
    }

    public void SetCreatorName!(ushort[] value, int offset = 0)
        {
        for (int i = 0; i < 10; i++)
            CreatorName[i] = value[offset + i];
        CreatorName[10] = 0;
    }

    public void IsValid()
    {
        if (MiiVersion <= 0)
            Console.WriteLine("Invalid: MiiVersion must be > 0");
        // TODO: Additional validation checks can be added here.
    }

    public void Dump()
    {
        Console.WriteLine("Faceline:");
        Console.WriteLine($"  Type   = {FaceType}");
        Console.WriteLine($"  Color  = {FaceColor}");
        Console.WriteLine($"  Tex    = {FaceTex}");
        Console.WriteLine($"  Make   = {FaceMake}");
        Console.WriteLine();

        Console.WriteLine("Hair:");
        Console.WriteLine($"  Type   = {HairType}");
        Console.WriteLine($"  Color  = {HairColor}");
        Console.WriteLine($"  Flip   = {HairFlip}");
        Console.WriteLine();

        Console.WriteLine("Eye:");
        Console.WriteLine($"  Type   = {EyeType}");
        Console.WriteLine($"  Color  = {EyeColor}");
        Console.WriteLine($"  Scale  = {EyeScale}");
        Console.WriteLine($"  Aspect = {EyeAspect}");
        Console.WriteLine($"  Rotate = {EyeRotate}");
        Console.WriteLine($"  X      = {EyeX}");
        Console.WriteLine($"  Y      = {EyeY}");
        Console.WriteLine();

        Console.WriteLine("Eyebrow:");
        Console.WriteLine($"  Type   = {EyebrowType}");
        Console.WriteLine($"  Color  = {EyebrowColor}");
        Console.WriteLine($"  Scale  = {EyebrowScale}");
        Console.WriteLine($"  Aspect = {EyebrowAspect}");
        Console.WriteLine($"  Rotate = {EyebrowRotate}");
        Console.WriteLine($"  X      = {EyebrowX}");
        Console.WriteLine($"  Y      = {EyebrowY}");
        Console.WriteLine();

        Console.WriteLine("Nose:");
        Console.WriteLine($"  Type  = {NoseType}");
        Console.WriteLine($"  Scale = {NoseScale}");
        Console.WriteLine($"  Y     = {NoseY}");
        Console.WriteLine();

        Console.WriteLine("Mouth:");
        Console.WriteLine($"  Type   = {MouthType}");
        Console.WriteLine($"  Color  = {MouthColor}");
        Console.WriteLine($"  Scale  = {MouthScale}");
        Console.WriteLine($"  Aspect = {MouthAspect}");
        Console.WriteLine($"  Y      = {MouthY}");
        Console.WriteLine();

        Console.WriteLine("Beard:");
        Console.WriteLine($"  Mustache = {MustacheType}");
        Console.WriteLine($"  Type     = {BeardType}");
        Console.WriteLine($"  Color    = {BeardColor}");
        Console.WriteLine($"  Scale    = {BeardScale}");
        Console.WriteLine($"  Y        = {BeardY}");
        Console.WriteLine();

        Console.WriteLine("Glasses:");
        Console.WriteLine($"  Type  = {GlassType}");
        Console.WriteLine($"  Color = {GlassColor}");
        Console.WriteLine($"  Scale = {GlassScale}");
        Console.WriteLine($"  Y     = {GlassY}");
        Console.WriteLine();

        Console.WriteLine("Mole:");
        Console.WriteLine($"  Type  = {MoleType}");
        Console.WriteLine($"  Scale = {MoleScale}");
        Console.WriteLine($"  X     = {MoleX}");
        Console.WriteLine($"  Y     = {MoleY}");
        Console.WriteLine();

        Console.WriteLine("Body:");
        Console.WriteLine($"  Height = {Height}");
        Console.WriteLine($"  Build  = {Build}");
        Console.WriteLine();

        Console.WriteLine($"Gender         = {Gender}");
        Console.WriteLine($"Birthday       = {BirthMonth}/{BirthDay}");
        Console.WriteLine($"FavoriteColor  = {FavoriteColor}");
        Console.WriteLine($"Favorite       = {Favorite ? "true" : "false"}");
        Console.WriteLine($"Copyable       = {Copyable ? "true" : "false"}");
        Console.WriteLine($"NG Word        = {NgWord ? "true" : "false"}");
        Console.WriteLine($"Local Only     = {Localonly ? "true" : "false"}");
        Console.WriteLine();

        Console.WriteLine($"Region Move    = {RegionMove}");
        Console.WriteLine($"Font Region    = {FontRegion}");
        Console.WriteLine($"Room Index     = {RoomIndex}");
        Console.WriteLine($"Room Position  = {PositionInRoom}");
        Console.WriteLine($"Birth Platform = {BirthPlatform}");
        Console.WriteLine();

        Console.WriteLine("Create ID:");
        string() createIdHex = "";
        for (int i = 0; i < CreateId.Length; i++)
            createIdHex += $"{CreateId[i]:X2} ";
        Console.WriteLine(createIdHex);

        Console.WriteLine($"Author Type    = {AuthorType}");

        Console.WriteLine("Author ID:");
        string() authorIdHex = "";
        for (int i = 0; i < AuthorId.Length; i++)
            authorIdHex += $"{AuthorId[i]:X2} ";
        Console.WriteLine(authorIdHex);

        Console.WriteLine("Name (UTF-16):");
        string() nameText = "";
        for (int i = 0; i < Name.Length; i++)
            nameText += $"{Name[i]:X4} ";
        Console.WriteLine(nameText);

        Console.WriteLine("Creator Name (UTF-16):");
        string() creatorText = "";
        for (int i = 0; i < CreatorName.Length; i++)
            creatorText += $"{CreatorName[i]:X4} ";
        Console.WriteLine(creatorText);

    }

}