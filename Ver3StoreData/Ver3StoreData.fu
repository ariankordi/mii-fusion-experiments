public class Ver3StoreData
{
    public const int Length = 96;

    public static void ToStoreDataBytes(byte[]# output, Ver3CharInfo info)
    {
       // Clear buffer
        for (int i = 0; i < Length; i++)
            output[i] = 0;

        ushort tmpU16;
        output[0] = (output[0] & ~(255 << 0)) | ((info.MiiVersion & 255) << 0);
        output[1] = (output[1] & ~(1 << 0)) | ((info.Copyable ? 1 : 0) << 0);
        output[1] = (output[1] & ~(1 << 1)) | ((info.NgWord ? 1 : 0) << 1);
        output[1] = (output[1] & ~(3 << 2)) | ((info.RegionMove & 3) << 2);
        output[1] = (output[1] & ~(3 << 4)) | ((info.FontRegion & 3) << 4);
        // reserved_0: not exposed
        output[2] = (output[2] & ~(15 << 0)) | ((info.RoomIndex & 15) << 0);
        output[2] = (output[2] & ~(15 << 4)) | ((info.PositionInRoom & 15) << 4);
        output[3] = (output[3] & ~(15 << 0)) | ((info.AuthorType & 15) << 0);
        output[3] = (output[3] & ~(7 << 4)) | ((info.BirthPlatform & 7) << 4);
        // reserved_1: not exposed

        info.AuthorId.CopyTo(0, output, 4, 8);

        info.CreateId.CopyTo(0, output, 12, 10);

        // reserved_2[2] = already zero
        output[24] = (output[24] & ~(1 << 0)) | ((info.Gender & 1) << 0);
        output[24] = (output[24] & ~(15 << 1)) | ((info.BirthMonth & 15) << 1);
        tmpU16 = output[24] | (output[25] << 8);
        tmpU16 = (tmpU16 & ~(31 << 5)) | ((info.BirthDay & 31) << 5);
        output[24] = tmpU16 & 0xFF;
        output[25] = (tmpU16 >> 8) & 0xFF;
        output[25] = (output[25] & ~(15 << 2)) | ((info.FavoriteColor & 15) << 2);
        output[25] = (output[25] & ~(1 << 6)) | ((info.Favorite ? 1 : 0) << 6);
        // padding_0 not exposed

        ushort[] name = info.Name;
        for (int i = 0; i < 10; i++) {
            output[26 + i * 2] = name[i];
            output[26 + i * 2 + 1] = (name[i] >> 8);
        }

        output[46] = info.Height;
        output[47] = info.Build;

        output[48] = (output[48] & ~(1 << 0)) | ((info.Localonly ? 1 : 0) << 0);
        output[48] = (output[48] & ~(15 << 1)) | ((info.FaceType & 15) << 1);
        output[48] = (output[48] & ~(7 << 5)) | ((info.FaceColor & 7) << 5);
        output[49] = (output[49] & ~(15 << 0)) | ((info.FaceTex & 15) << 0);
        output[49] = (output[49] & ~(15 << 4)) | ((info.FaceMake & 15) << 4);
        output[50] = (output[50] & ~(255 << 0)) | ((info.HairType & 255) << 0);
        output[51] = (output[51] & ~(7 << 0)) | ((info.HairColor & 7) << 0);
        output[51] = (output[51] & ~(1 << 3)) | ((info.HairFlip & 1) << 3);
        // padding_1 not exposed

        output[52] = (output[52] & ~(63 << 0)) | ((info.EyeType & 63) << 0);
        tmpU16 = output[52] | (output[53] << 8);
        tmpU16 = (tmpU16 & ~(7 << 6)) | ((info.EyeColor & 7) << 6);
        output[52] = tmpU16;
        output[53] = (tmpU16 >> 8);
        output[53] = (output[53] & ~(15 << 1)) | ((info.EyeScale & 15) << 1);
        output[53] = (output[53] & ~(7 << 5)) | ((info.EyeAspect & 7) << 5);

        output[54] = (output[54] & ~(31 << 0)) | ((info.EyeRotate & 31) << 0);
        tmpU16 = output[54] | (output[55] << 8);
        tmpU16 = (tmpU16 & ~(15 << 5)) | ((info.EyeX & 15) << 5);
        output[54] = tmpU16;
        output[55] = (tmpU16 >> 8);
        output[55] = (output[55] & ~(31 << 1)) | ((info.EyeY & 31) << 1);
        // padding_2 not exposed

        output[56] = (output[56] & ~(31 << 0)) | ((info.EyebrowType & 31) << 0);
        output[56] = (output[56] & ~(7 << 5)) | ((info.EyebrowColor & 7) << 5);
        output[57] = (output[57] & ~(15 << 0)) | ((info.EyebrowScale & 15) << 0);
        output[57] = (output[57] & ~(7 << 4)) | ((info.EyebrowAspect & 7) << 4);
        // padding_3 not exposed

        output[58] = (output[58] & ~(31 << 0)) | ((info.EyebrowRotate & 31) << 0);
        tmpU16 = output[58] | (output[59] << 8);
        tmpU16 = (tmpU16 & ~(15 << 5)) | ((info.EyebrowX & 15) << 5);
        output[58] = (tmpU16 & 0xFF);
        output[59] = ((tmpU16 >> 8) & 0xFF);
        output[59] = (output[59] & ~(31 << 1)) | ((info.EyebrowY & 31) << 1);
        // padding_4 not exposed

        output[60] = (output[60] & ~(31 << 0)) | ((info.NoseType & 31) << 0);
        tmpU16 = output[60] | (output[61] << 8);
        tmpU16 = (tmpU16 & ~(15 << 5)) | ((info.NoseScale & 15) << 5);
        output[60] = (tmpU16 & 0xFF);
        output[61] = ((tmpU16 >> 8) & 0xFF);
        output[61] = (output[61] & ~(31 << 1)) | ((info.NoseY & 31) << 1);
        // padding_5 not exposed

        output[62] = (output[62] & ~(63 << 0)) | ((info.MouthType & 63) << 0);
        tmpU16 = output[62] | (output[63] << 8);
        tmpU16 = (tmpU16 & ~(7 << 6)) | ((info.MouthColor & 7) << 6);
        output[62] = (tmpU16 & 0xFF);
        output[63] = ((tmpU16 >> 8) & 0xFF);
        output[63] = (output[63] & ~(15 << 1)) | ((info.MouthScale & 15) << 1);
        output[63] = (output[63] & ~(7 << 5)) | ((info.MouthAspect & 7) << 5);
        output[64] = (output[64] & ~(31 << 0)) | ((info.MouthY & 31) << 0);
        output[64] = (output[64] & ~(7 << 5)) | ((info.MustacheType & 7) << 5);
        // padding_6 not exposed

        output[66] = (output[66] & ~(7 << 0)) | ((info.BeardType & 7) << 0);
        output[66] = (output[66] & ~(7 << 3)) | ((info.BeardColor & 7) << 3);
        tmpU16 = output[66] | (output[67] << 8);
        tmpU16 = (tmpU16 & ~(15 << 6)) | ((info.BeardScale & 15) << 6);
        output[66] = (tmpU16 & 0xFF);
        output[67] = ((tmpU16 >> 8) & 0xFF);
        output[67] = (output[67] & ~(31 << 2)) | ((info.BeardY & 31) << 2);
        // padding_7 not exposed

        output[68] = (output[68] & ~(15 << 0)) | ((info.GlassType & 15) << 0);
        output[68] = (output[68] & ~(7 << 4)) | ((info.GlassColor & 7) << 4);
        tmpU16 = output[68] | (output[69] << 8);
        tmpU16 = (tmpU16 & ~(15 << 7)) | ((info.GlassScale & 15) << 7);
        output[68] = (tmpU16 & 0xFF);
        output[69] = ((tmpU16 >> 8) & 0xFF);
        output[69] = (output[69] & ~(31 << 3)) | ((info.GlassY & 31) << 3);

        output[70] = (output[70] & ~(1 << 0)) | ((info.MoleType & 1) << 0);
        output[70] = (output[70] & ~(15 << 1)) | ((info.MoleScale & 15) << 1);
        tmpU16 = output[70] | (output[71] << 8);
        tmpU16 = (tmpU16 & ~(31 << 5)) | ((info.MoleX & 31) << 5);
        output[70] = (tmpU16 & 0xFF);
        output[71] = ((tmpU16 >> 8) & 0xFF);
        output[71] = (output[71] & ~(31 << 2)) | ((info.MoleY & 31) << 2);
        // padding_8 not exposed

        ushort[] creatorName = info.CreatorName;
        for (int i = 0; i < 10; i++) {
            output[72 + i * 2] = (creatorName[i] & 0xFF);
            output[72 + i * 2 + 1] = ((creatorName[i] >> 8) & 0xFF);
        }

        // pad9 not exposed

        ushort crc = Crc16Ccitt.Calculate(output, 94, 0);
        // Write CRC-16 as big-endian.
        output[94] = crc >> 8;
        output[95] = crc & 0xFF;
    }
    public static void SetFromBytes(byte[] src, Ver3CharInfo# info)
    {
        info.MiiVersion = src[0];
        info.Copyable = (src[1] & 1) != 0;
        info.NgWord = (src[1] >> 1 & 1) != 0;
        info.RegionMove = (src[1] >> 2 & 3);
        info.FontRegion = (src[1] >> 4 & 3);
        info.RoomIndex = (src[2] & 0xf);
        info.PositionInRoom = (src[2] >> 4);
        info.AuthorType = (src[3] & 0xf);
        info.BirthPlatform = (src[3] >> 4 & 7);
        info.SetAuthorId(src, 4);
        info.SetCreateId(src, 0xc);
        info.Gender = (src[0x18] & 1);
        info.BirthMonth = (src[0x18] >> 1 & 0xf);
        info.BirthDay = (src[0x19] & 3) << 3 | (src[0x18] >> 5);
        info.FavoriteColor = (src[0x19] >> 2 & 0xf);
        info.Favorite = (src[0x19] >> 6 & 1) != 0;
        ushort[10] name;
        for (int i = 0; i < name.Length; i++)
            name[i] = src[26 + i * 2] | (src[26 + i * 2 + 1] >> 8);
        info.SetName(name);
        info.Height = src[0x2e];
        info.Build = src[0x2f];
        info.Localonly = (src[0x30] & 1) != 0;
        info.FaceType = (src[0x30] >> 1 & 0xf);
        info.FaceColor = (src[0x30] >> 5);
        info.FaceTex = (src[0x31] & 0xf);
        info.FaceMake = (src[0x31] >> 4);
        info.HairType = src[0x32];
        info.HairColor = (src[0x33] & 7);
        info.HairFlip = (src[0x33] >> 3 & 1);
        info.EyeType = (src[0x34] & 0x3f);
        info.EyeColor = (src[0x35] & 1) << 2 | (src[0x34] >> 6);
        info.EyeScale = (src[0x35] >> 1 & 0xf);
        info.EyeAspect = (src[0x35] >> 5);
        info.EyeRotate = (src[0x36] & 0x1f);
        info.EyeX = (src[0x37] & 1) << 3 | (src[0x36] >> 5);
        info.EyeY = (src[0x37] >> 1 & 0x1f);
        info.EyebrowType = (src[0x38] & 0x1f);
        info.EyebrowColor = (src[0x38] >> 5);
        info.EyebrowScale = (src[0x39] & 0xf);
        info.EyebrowAspect = (src[0x39] >> 4 & 7);
        info.EyebrowRotate = (src[0x3a] & 0x1f);
        info.EyebrowX = (src[0x3b] & 1) << 3 | (src[0x3a] >> 5);
        info.EyebrowY = (src[0x3b] >> 1 & 0x1f);
        info.NoseType = (src[0x3c] & 0x1f);
        info.NoseScale = (src[0x3d] & 1) << 3 | (src[0x3c] >> 5);
        info.NoseY = (src[0x3d] >> 1 & 0x1f);
        info.MouthType = (src[0x3e] & 0x3f);
        info.MouthColor = (src[0x3f] & 1) << 2 | (src[0x3e] >> 6);
        info.MouthScale = (src[0x3f] >> 1 & 0xf);
        info.MouthAspect = (src[0x3f] >> 5);
        info.MouthY = (src[0x40] & 0x1f);
        info.MustacheType = (src[0x40] >> 5);
        info.BeardType = (src[0x42] & 7);
        info.BeardColor = (src[0x42] >> 3 & 7);
        info.BeardScale = (src[0x43] & 3) << 2 | (src[0x42] >> 6);
        info.BeardY = (src[0x43] >> 2 & 0x1f);
        info.GlassType = (src[0x44] & 0xf);
        info.GlassColor = (src[0x44] >> 4 & 7);
        info.GlassScale = (src[0x45] & 7) * 2 | (src[0x44] >> 7);
        info.GlassY = (src[0x45] >> 3);
        info.MoleType = (src[0x46] & 1);
        info.MoleScale = (src[0x46] >> 1 & 0xf);
        info.MoleX = (src[0x47] & 3) << 3 | (src[0x46] >> 5);
        info.MoleY = (src[0x47] >> 2 & 0x1f);
        ushort[10] creatorName;
        for (int i = 0; i < creatorName.Length; i++)
            creatorName[i] = src[72 + i * 2] | (src[72 + i * 2 + 1] >> 8);
        info.SetCreatorName(creatorName);
    }
}
